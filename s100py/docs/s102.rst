S102
====

Odds are that the only function you will need is :meth:`~s100py.s102.utils.from_gdal`.  You call it with
the input path (some geogoded raster, like a BAG) and the output path (for an HDF5 file in S102 format).
You can override some of the metadata elements with a dictionary as well.

If you are converting a set of arrays or a format not supported by GDAL then use the
:meth:`~s100py.s102.utils.from_arrays_with_metadata` method.  You supply it numpy arrays and information about
the horizontal and vertical coordinate systems and it does the rest.

If you need more involved interaction with the data then import s102 from s100py.
Methods and classes from both the api.py and utils.py will be available.::

    from s100py import s102
    s102.from_gdal()
    # or
    from s100py.s102 import utils
    s102_utils.from_gdal()

.. toctree::
    :maxdepth: 4

    s102/s102_readme
    s102/s102_utils
    s102/s102_api

